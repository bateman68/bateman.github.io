[{"content":"String、StringBuffer、StringBuilder区别 1.String 性质：不可变（Immutable）\n一旦创建，字符串的内容无法改变。每次对String对象进行修改都会创建一个新的对象。 适用场景\n字符串内容很少变化的场景，如字符串操作。 优点\n线程安全，字符串常量池优化性能 使用时简单直观 缺点\n每次修改都会创建新对象，占用更多内存，性能较低。 示例\n1String str = \u0026#34;Hello\u0026#34;; 2str += \u0026#34; World\u0026#34;; // 创建了新的字符串对象 常用方法\n**length()：**返回字符串的长度。 **charAt(int index)：**返回指定索引位置的字符。 **concat(String str)：**将指定的字符串连接到原字符串的末尾。 **equals(Object obj)：**判断字符串是否与指定对象相等。 **equalsIgnoreCase(String str)：**忽略大小写比较字符串是否相等。 **isEmpty()：**判断字符串是否为空。 **contains(CharSequence sequence)：**判断字符串是否包含指定的字符序列。 **indexOf(String str)：**返回指定字符串在原字符串中第一次出现的位置索引。 **lastIndexOf(String str)：**返回指定字符串在原字符串中最后一次出现的位置索引。 **substring(int beginIndex)：**截取从指定索引开始到字符串末尾的子字符串。 **substring(int beginIndex, int endIndex)：**截取指定索引范围的子字符串。 **toLowerCase()：**将字符串转换为小写。 **toUpperCase()：**将字符串转换为大写。 **trim()：**去除字符串两端的空白字符。 **split(String regex)：**根据指定的正则表达式将字符串拆分为字符串数组。 **replace(char oldChar, char newChar)：**替换字符串中的字符。 **startsWith(String prefix)：**判断字符串是否以指定的前缀开始。 **endsWith(String suffix)：**判断字符串是否以指定的后缀结尾。 ","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"stringstringbufferstringbuilder区别\"\u003eString、StringBuffer、StringBuilder区别\u003c/h2\u003e\n\u003ch3 id=\"1string\"\u003e1.String\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e性质：不可变（Immutable）\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一旦创建，字符串的内容无法改变。每次对String对象进行修改都会创建一个新的对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e适用场景\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e字符串内容很少变化的场景，如字符串操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e优点\u003c/strong\u003e\u003c/p\u003e","title":"My First Post"},{"content":"这里就可以写一些关于的相关信息了.\n","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"},{"content":"String、StringBuffer、StringBuilder区别 1.String 性质：不可变（Immutable）\n一旦创建，字符串的内容无法改变。每次对String对象进行修改都会创建一个新的对象。 适用场景\n字符串内容很少变化的场景，如字符串操作。 优点\n线程安全，字符串常量池优化性能 使用时简单直观 缺点\n每次修改都会创建新对象，占用更多内存，性能较低。 示例\n1String str = \u0026#34;Hello\u0026#34;; 2str += \u0026#34; World\u0026#34;; // 创建了新的字符串对象 常用方法\n**length()：**返回字符串的长度。 **charAt(int index)：**返回指定索引位置的字符。 **concat(String str)：**将指定的字符串连接到原字符串的末尾。 **equals(Object obj)：**判断字符串是否与指定对象相等。 **equalsIgnoreCase(String str)：**忽略大小写比较字符串是否相等。 **isEmpty()：**判断字符串是否为空。 **contains(CharSequence sequence)：**判断字符串是否包含指定的字符序列。 **indexOf(String str)：**返回指定字符串在原字符串中第一次出现的位置索引。 **lastIndexOf(String str)：**返回指定字符串在原字符串中最后一次出现的位置索引。 **substring(int beginIndex)：**截取从指定索引开始到字符串末尾的子字符串。 **substring(int beginIndex, int endIndex)：**截取指定索引范围的子字符串。 **toLowerCase()：**将字符串转换为小写。 **toUpperCase()：**将字符串转换为大写。 **trim()：**去除字符串两端的空白字符。 **split(String regex)：**根据指定的正则表达式将字符串拆分为字符串数组。 **replace(char oldChar, char newChar)：**替换字符串中的字符。 **startsWith(String prefix)：**判断字符串是否以指定的前缀开始。 **endsWith(String suffix)：**判断字符串是否以指定的后缀结尾。 ","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"stringstringbufferstringbuilder区别\"\u003eString、StringBuffer、StringBuilder区别\u003c/h2\u003e\n\u003ch3 id=\"1string\"\u003e1.String\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e性质：不可变（Immutable）\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一旦创建，字符串的内容无法改变。每次对String对象进行修改都会创建一个新的对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e适用场景\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e字符串内容很少变化的场景，如字符串操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e优点\u003c/strong\u003e\u003c/p\u003e","title":"My First Post"},{"content":"这里就可以写一些关于的相关信息了.\n","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"},{"content":"String、StringBuffer、StringBuilder区别 1.String 性质：不可变（Immutable）\n一旦创建，字符串的内容无法改变。每次对String对象进行修改都会创建一个新的对象。 适用场景\n字符串内容很少变化的场景，如字符串操作。 优点\n线程安全，字符串常量池优化性能 使用时简单直观 缺点\n每次修改都会创建新对象，占用更多内存，性能较低。 示例\n1String str = \u0026#34;Hello\u0026#34;; 2str += \u0026#34; World\u0026#34;; // 创建了新的字符串对象 常用方法\n**length()：**返回字符串的长度。 **charAt(int index)：**返回指定索引位置的字符。 **concat(String str)：**将指定的字符串连接到原字符串的末尾。 **equals(Object obj)：**判断字符串是否与指定对象相等。 **equalsIgnoreCase(String str)：**忽略大小写比较字符串是否相等。 **isEmpty()：**判断字符串是否为空。 **contains(CharSequence sequence)：**判断字符串是否包含指定的字符序列。 **indexOf(String str)：**返回指定字符串在原字符串中第一次出现的位置索引。 **lastIndexOf(String str)：**返回指定字符串在原字符串中最后一次出现的位置索引。 **substring(int beginIndex)：**截取从指定索引开始到字符串末尾的子字符串。 **substring(int beginIndex, int endIndex)：**截取指定索引范围的子字符串。 **toLowerCase()：**将字符串转换为小写。 **toUpperCase()：**将字符串转换为大写。 **trim()：**去除字符串两端的空白字符。 **split(String regex)：**根据指定的正则表达式将字符串拆分为字符串数组。 **replace(char oldChar, char newChar)：**替换字符串中的字符。 **startsWith(String prefix)：**判断字符串是否以指定的前缀开始。 **endsWith(String suffix)：**判断字符串是否以指定的后缀结尾。 ","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003ch2 id=\"stringstringbufferstringbuilder区别\"\u003eString、StringBuffer、StringBuilder区别\u003c/h2\u003e\n\u003ch3 id=\"1string\"\u003e1.String\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e性质：不可变（Immutable）\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一旦创建，字符串的内容无法改变。每次对String对象进行修改都会创建一个新的对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e适用场景\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e字符串内容很少变化的场景，如字符串操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e优点\u003c/strong\u003e\u003c/p\u003e","title":"My First Post"},{"content":"这里就可以写一些关于的相关信息了.\n","permalink":"http://localhost:1313/about/","summary":"about","title":"关于"}]